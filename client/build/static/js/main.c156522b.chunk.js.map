{"version":3,"sources":["utils/UserContext.js","utils/API.js","utils/useForm.js","components/CreateCharacter.js","components/CharacterCard.js","components/UserCard.js","components/CharacterPool.js","App.js","registerServiceWorker.js","index.js"],"names":["UserContext","React","createContext","API","obj","axios","post","then","response","console","log","catch","error","get","name","concat","useForm","initialValues","callback","_useState","useState","_useState2","Object","slicedToArray","values","setValues","handleChange","event","persist","objectSpread","defineProperty","target","value","handleSubmit","preventDefault","CreateCharacter","props","state","setState","_useForm","race","subrace","class","level","maxHP","currentHP","AC","initiative","perception","react_default","a","createElement","Fragment","onSubmit","type","placeholder","onChange","required","onClick","CharacterCard","character","UserCard","socket","userCharacter","useContext","hpState","sethpState","useEffect","className","e","emit","CharacterPool","activeCharacters","setActiveCharacters","on","data","map","char","components_UserCard","key","_id","components_CharacterCard","io","App","createCharacterState","setCreateCharacterState","_useState3","_useState4","characters","setCharacters","_useState5","_useState6","characterSelect","setCharacterSelect","_useState7","_useState8","setUserCharacter","charactersArr","utils_UserContext","Provider","err","id","size","components_CreateCharacter","components_CharacterPool","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c156522b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst UserContext = React.createContext({});\r\n\r\nexport default UserContext;","import axios from 'axios';\n// import { response } from 'express';\n\nexport default {\n\n  // User Routes\n  createUser: (obj) => {\n    axios.post('/api/user', obj)\n    .then(response => {\n      console.log(response);\n      return response;\n    })\n    .catch(error => console.log(error))\n  },\n\n  getAllUsers: () => {\n    return axios.get('/api/user/all');\n  },\n\n  getUserByName: (name) => {\n    return axios.get(`/api/user/${name}`);\n  },\n\n  // Character routes\n  createCharacter: (obj) => {\n    axios.post('/api/character', obj)\n    .then(response => {\n      console.log(response);\n      return response;\n    })\n    .catch(error => console.log(error))\n  },\n  \n  getAllCharacters: () => {\n    return axios.get('/api/character/all');\n  },\n\n  getCharacterByName: (name) => {\n    return axios.get(`/api/character/${name}`);\n  },\n  \n  deleteCharacterByName: (name) => {\n    return axios.get(`/api/character/delete/${name}`);\n  },\n}","import { useState } from 'react';\r\n\r\nconst useForm = (initialValues, callback) => {\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const handleSubmit = (event) => {\r\n    if (event) event.preventDefault();\r\n      callback()\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n    setValues(values => ({ ...values, [event.target.name]: event.target.value}));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values\r\n  }\r\n};\r\n\r\nexport default useForm;","import React from 'react';\nimport useForm from '../utils/useForm';\nimport API from '../utils/API';\n\nconst CreateCharacter = props => {\n\n  let state = props.state;\n  const setState = props.setState;\n\n  const characterSubmit = () => {\n    console.log(values)\n    values.currentHP = values.maxHP;\n    API.createCharacter(values)\n    setState(!state)\n  }\n\n  const { values, handleSubmit, handleChange } = useForm(\n    {\n      name: \"\",\n      race: \"\",\n      subrace: \"\",\n      class: \"\",\n      level: \"\",\n      maxHP: \"\",\n      currentHP: \"\",\n      AC: \"\",\n      initiative: \"\",\n      perception: \"\",\n    },\n    characterSubmit\n  )\n\n  return(\n    <React.Fragment>\n    <form onSubmit={handleSubmit}>\n    \n      <label>\n        What is your character's name?\n      </label>\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Enter name\"\n          onChange={handleChange}\n          value={values.name}\n          required\n        />\n\n      <label>\n        What is your character's race?\n      </label>\n        <input\n          name=\"race\"\n          type=\"text\"\n          placeholder=\"Enter race\"\n          onChange={handleChange}\n          value={values.race}\n          required\n        />\n\n      <label>\n        If applicable, What is your character's subrace?\n      </label>\n        <input\n          name=\"subrace\"\n          type=\"text\"\n          placeholder=\"Enter subrace\"\n          onChange={handleChange}\n          value={values.subrace}\n        />\n\n      <label>\n        What is your character's class?\n      </label>\n        <input\n          name=\"class\"\n          type=\"text\"\n          placeholder=\"Enter class\"\n          onChange={handleChange}\n          value={values.class}\n          required\n        />\n\n      <label>\n        What is your character's level?\n      </label>\n        <input\n          name=\"level\"\n          type=\"text\"\n          placeholder=\"Enter level\"\n          onChange={handleChange}\n          value={values.level}\n          required\n        />\n\n      <label>\n        What is your character's max HP?\n      </label>\n        <input\n          name=\"maxHP\"\n          type=\"text\"\n          placeholder=\"Enter max HP\"\n          onChange={handleChange}\n          value={values.maxHP}\n          required\n        />\n\n      <label>\n        What is your character's armor class?\n      </label>\n        <input\n          name=\"AC\"\n          type=\"text\"\n          placeholder=\"Enter AC\"\n          onChange={handleChange}\n          value={values.AC}\n          required\n        />\n\n      <label>\n        What is your character's initiative bonus?\n      </label>\n        <input\n          name=\"initiative\"\n          type=\"text\"\n          placeholder=\"Enter initiative Bonus\"\n          onChange={handleChange}\n          value={values.initiative}\n          required\n        />\n\n      <label>\n        What is your character's passive perception?\n      </label>\n        <input\n          name=\"perception\"\n          type=\"text\"\n          placeholder=\"Enter perception bonus +10\"\n          onChange={handleChange}\n          value={values.perception}\n          required\n        />\n        <button type=\"submit\">Create character</button>\n    </form>\n    <button onClick={()=> setState(!state)}>Choose a Character</button>\n    </React.Fragment>\n  )\n\n}\n\nexport default CreateCharacter;","import React from 'react';\n\nconst CharacterCard = props => {\n\n  const character = props.character;\n\n  return(\n    <div>\n      <h1>Name: {character.name}</h1>\n      <span><h2>Race: {character.race}</h2><h2>Subrace: {character.subrace}</h2></span>\n      <span><h2>Class: {character.class}</h2><h2>Level: {character.level}</h2></span>\n      <span><h2>Current HP: {character.currentHP}</h2><h2>Max HP: {character.maxHP}</h2></span>\n      <span><h2>AC: {character.AC}</h2><h2>Initiative: {character.initiative}</h2><h2>Perception: {character.perception}</h2></span>\n    </div>\n  )\n}\n\nexport default CharacterCard;","import React, { useContext, useState, useEffect } from 'react';\nimport UserContext from '../utils/UserContext';\n\nconst UserCard = props => {\n\n  const socket = props.socket\n\n  const { userCharacter } = useContext(UserContext);\n\n  const [ hpState, sethpState ] = useState(userCharacter.currentHP)\n\n  const name = userCharacter.name;\n\n  const handleHP = e => {\n    sethpState(e.target.value);\n    console.log(hpState)\n    socket.emit('update-hp', {hpState, name});\n  };\n\n  useEffect(() => {\n  },[socket])\n\n  return(\n    <div className='border-black'>\n      <h1>Name: {userCharacter.name}</h1>\n      <span><h2>Race: {userCharacter.race}</h2><h2>Subrace: {userCharacter.subrace}</h2></span>\n      <span><h2>Class: {userCharacter.class}</h2><h2>Level: {userCharacter.level}</h2></span>\n      <span>Current HP<textarea value={hpState} onChange={handleHP}></textarea><h2>Max HP: {userCharacter.maxHP}</h2></span>\n      <span><h2>AC: {userCharacter.AC}</h2><h2>Initiative: {userCharacter.initiative}</h2><h2>Perception: {userCharacter.perception}</h2></span>\n    </div>\n  )\n}\n\nexport default UserCard;","import React, { useContext, useState, useEffect } from 'react';\nimport UserContext from '../utils/UserContext';\nimport CharacterCard from './CharacterCard';\nimport UserCard from './UserCard';\n\nconst CharacterPool = props => {\n\n  const socket = props.socket;\n\n  const { userCharacter } = useContext(UserContext);\n\n  const [ activeCharacters, setActiveCharacters ] = useState([]);\n\n  useEffect(() => {\n    socket.on('update-user-characters', data => {\n      console.log(data);\n      // Updates player array from backend array\n      setActiveCharacters(data);\n    })\n  },[])\n\n  return(\n    <div>\n      {activeCharacters.map(char => (\n        char.name === userCharacter.name ?\n        <UserCard socket={socket} key={userCharacter._id} />\n        :\n        <CharacterCard character={char} key={char._id}/>\n      ))}\n    </div>\n  )\n}\n\nexport default CharacterPool;","import React, { useState, useEffect } from \"react\";\nimport UserContext from \"./utils/UserContext\";\nimport io from 'socket.io-client';\nimport API from './utils/API';\nimport CreateCharacter from \"./components/CreateCharacter\";\nimport CharacterPool from \"./components/CharacterPool\";\n\nconst socket = io();\n\nconst App = () => {\n\n  const [createCharacterState, setCreateCharacterState] = useState(false)\n\n  // Sets character Array for users to select from\n  const [characters, setCharacters] = useState([]);\n\n  // Handles character selection for user\n  const [characterSelect, setCharacterSelect] = useState(\"\");\n  // Handles Character selection value change\n  const handleCharacterSelection = e => {\n    setCharacterSelect(e.target.value)\n  };\n  // Takes character select state and grabs the character info from an api\n  const selectCharacter = e => {\n    e.preventDefault();\n    API.getCharacterByName(characterSelect)\n      .then(char => {\n        const character = char.data[0];\n        setUserCharacter(character);\n        console.log('UserCharacter', userCharacter)\n        socket.emit('add-user-character', character);\n      })\n      .catch(err => console.log(err))\n  }\n\n  // State for users selected character\n  const [userCharacter, setUserCharacter] = useState(\n    {\n      name: \"\",\n      race: \"\",\n      subrace: \"\",\n      class: \"\",\n      level: \"\",\n      currentHP: \"\",\n      maxHP: \"\",\n      AC: \"\",\n      initiative: \"\",\n      perception: \"\",\n    }\n  );\n\n  // Gets all created characters on page load\n  useEffect(() => {\n    API.getAllCharacters()\n      .then(characters => {\n        console.log(characters.data);\n        const charactersArr = characters.data;\n        setCharacters(charactersArr)\n      })\n  }, [])\n\n  return (\n    <UserContext.Provider value={{ userCharacter }}>\n      <div>\n        {userCharacter.name === \"\" ?\n          createCharacterState === false ?\n            <React.Fragment>\n              <form onSubmit={selectCharacter}>\n                <label>\n                  Select Character\n            </label>\n                <select\n                  value={characterSelect}\n                  onChange={handleCharacterSelection}\n                  id=\"name\"\n                  size=\"6\"\n                >\n                  {characters.map(char => (\n                    <option\n                      key={char._id}\n                      value={char.name}\n                    >\n                      {char.name}\n                    </option>\n                  ))}\n                </select>\n                <button type=\"submit\">Confirm</button>\n              </form>\n              <button onClick={() => setCreateCharacterState(!createCharacterState)}>Create a Character</button>\n            </React.Fragment>\n            :\n            <CreateCharacter\n              state={createCharacterState}\n              setState={setCreateCharacterState}\n            />\n          :\n          <div>\n            <CharacterPool socket={socket}/>\n          </div>\n        }\n      </div>\n    </UserContext.Provider>\n  )\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/main.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}